.data

smallTable: .word 7,8,1,9,2,6,3,10,4,5
#mediumTable: .word 35,90,26,61,52,6,59,67,36,49,47,41,89,14,16,83,45,28,62,1,39,9,43,42,78,12,70,95,92,60,82,44,53,46,7,23,32,85,18,51,40,75,24,8,76,84,21,20,80,71,56,91,77,66,30,17,4,98,33,3,81,38,5,29,88,31,57,2,10,73,63,64,13,54,79,87,86,55,69,96,19,34,15,74,11,22,65,99,48,58,97,68,50,93,100,25,27,37,94,72
#largeTable: .word 277,208,498,372,64,603,537,529,279,218,836,626,175,29,855,155,897,884,116,832,968,641,342,531,715,793,685,135,174,817,453,798,760,470,48,14,50,586,310,624,222,651,224,611,451,128,870,661,863,958,794,406,846,901,966,953,266,710,295,675,549,921,660,520,947,259,307,745,146,488,885,468,781,985,384,356,262,361,487,335,148,78,268,191,246,303,46,467,992,253,23,936,889,849,299,994,26,580,391,213,280,281,644,317,602,298,892,899,733,158,839,801,315,184,694,462,542,378,779,110,818,8,820,104,450,171,264,387,429,238,1000,566,819,552,961,553,118,393,942,96,454,730,722,974,814,716,637,795,878,472,844,102,853,85,729,173,362,666,630,965,380,405,75,265,687,504,728,255,484,613,134,987,699,928,350,152,441,796,804,916,270,693,695,446,735,622,202,676,294,469,390,360,196,678,761,828,633,172,816,370,792,114,938,330,200,964,874,946,392,534,164,739,597,314,704,954,63,327,859,207,521,702,434,486,560,131,856,528,714,86,82,66,684,802,827,199,875,283,258,625,308,972,67,581,221,397,526,319,285,509,247,945,533,56,830,142,416,182,671,615,610,565,18,871,334,482,81,857,933,562,585,194,445,339,290,42,440,822,386,461,37,752,984,614,92,349,373,659,273,417,654,514,803,98,969,679,89,437,161,204,347,851,587,999,336,807,503,197,260,145,364,180,649,750,867,69,478,583,904,831,932,10,909,355,995,727,908,225,898,682,944,479,551,805,394,923,345,634,569,117,376,721,690,511,941,130,188,412,775,439,407,910,510,860,284,501,681,133,978,508,263,1,774,600,17,215,838,383,653,94,983,358,826,282,559,768,926,369,890,674,476,409,638,403,847,54,365,723,952,32,652,719,286,427,864,73,595,532,217,670,241,639,242,235,59,988,43,883,880,949,769,5,689,558,956,198,93,862,523,841,665,567,122,287,743,496,663,311,39,13,115,49,447,564,381,845,572,854,398,550,770,239,237,159,571,959,45,756,986,887,561,248,150,748,119,656,306,764,780,428,757,596,789,650,563,683,982,680,881,205,732,772,998,494,788,190,156,338,799,865,332,448,422,352,708,903,873,389,979,951,323,245,424,420,84,181,9,272,99,577,460,631,425,481,568,220,711,698,990,858,20,737,211,107,456,905,842,543,929,212,203,52,244,707,30,555,609,741,79,153,396,123,593,234,443,960,667,312,840,962,617,726,457,955,126,219,777,829,891,599,328,616,240,400,738,948,809,636,44,527,810,165,578,588,385,502,167,592,21,724,88,431,869,475,61,632,500,742,120,629,35,677,640,642,11,606,333,189,359,228,833,872,886,375,746,519,176,257,604,300,852,758,997,6,411,515,320,751,647,177,401,296,935,582,269,877,712,90,60,76,216,797,696,930,452,937,900,975,896,579,40,36,894,154,725,837,473,608,545,662,249,466,824,374,288,924,278,68,7,316,371,922,432,33,31,366,231,151,271,749,353,87,686,605,160,785,669,967,524,535,782,442,232,505,911,850,346,399,236,627,767,902,101,800,771,108,980,210,140,137,973,506,570,22,193,590,786,163,455,103,77,388,734,601,419,297,267,783,981,201,906,882,250,731,931,700,91,635,879,591,648,744,848,471,438,230,149,811,304,309,612,645,483,183,713,179,4,379,491,292,47,351,187,691,185,692,538,331,861,404,778,950,243,575,111,168,513,598,492,430,324,913,34,340,971,943,516,368,530,927,584,147,426,717,489,919,341,2,812,808,939,229,418,876,95,113,226,525,100,740,329,480,449,996,19,495,620,289,618,576,474,658,357,121,507,573,459,815,754,433,344,753,539,806,74,688,736,554,790,657,458,129,186,765,301,261,907,302,574,321,655,408,367,490,275,477,868,544,132,791,866,70,293,363,112,192,444,322,274,382,41,705,83,38,223,170,697,759,291,27,517,672,835,917,415,787,976,963,435,706,138,912,747,402,940,522,619,703,915,825,24,920,594,914,166,925,343,65,3,71,55,143,843,157,106,463,80,709,62,58,169,776,414,125,977,813,957,326,127,518,97,305,893,436,628,895,664,209,701,540,57,28,53,607,991,536,325,934,337,141,178,784,144,989,485,16,206,124,888,512,413,766,15,348,623,252,643,821,668,276,233,139,465,823,25,762,12,497,556,673,72,105,547,763,162,395,773,254,313,546,755,136,918,493,834,354,548,421,589,621,195,718,464,256,646,227,410,970,541,51,109,499,318,557,377,251,993,720,423,214

#smallSorted: .word 1,2,3,4,5,7,6,9,10
#mediumSorted: .word 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,71,62,63,64,65,66,67,68,69,70,61,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99
#largeSorted: .word 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,971,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999

.text

      # test quicksort
      la $a0, smallTable
      li $a1, 0
      li $a2, 9
      
      jal qs
      
      # terminate
      li $v0, 10
      syscall
      

#void quicksort (int v[], int start, int end){
#    if (start < end){
#        int q = partition(v, start, end);
#        quicksort(v, start, q - 1);
#        quicksort(v,q + 1,end);
#    }
#}


# arguments: $a0 = v[], $a1 = start, $a2 = end
# saved variables: $s0 = q, $s1 = v[], $s2 = start, $s3 = end
qs:     
        addi $sp,$sp, -20
        sw $ra, 16($sp)
        sw $s3,12($sp)         # save $s3 on stack
        sw $s2, 8($sp)         # save $s2 on stack
        sw $s1, 4($sp)         # save $s1 on stack
        sw $s0, 0($sp)         # save $s0 on stack
              
###################################################
        
        move $s1, $a0          # save $a0 in $s1
        move $s2, $a1          # save $a1 in $s2
        move $s3, $a2          # save $a2 in $s3
        
        slt $t0, $s2, $s3      # $t0 = 1 if $s2<$s3 (if start < end)
        beq $t0, $zero, done   # go to done if start > end (i.e. $t0=0)
       
        jal partition          # partition(v, start, end)
        add $s0, $v0, $zero    # p = return value from partition function
        
        #move $a0, $s1          # $a0 = v[]      
        #move $a1, $s2          # $a1 = start
        move $a2, $s0          # $a2 = q
        jal qs                 # partition(v, start, q)
        
        move $a0, $s1          # $a0 = v[]      
        addi $a1, $s0, 1       # $t1 = p+1
        move $a2, $s3          # $a2 = end
        
        jal qs                 # partition(v, q+1, end)
        
###################################################

done: 	lw $s0, 0($sp)         # restore $s0 from stack
        lw $s1, 4($sp)         # restore $s1 from stack
        lw $s2, 8($sp)         # restore $s2 from stack
        lw $s3,12($sp)         # restore $s3 from stack
        lw $ra,16($sp)         # restore $ra from stack
        addi $sp,$sp, 20       # restore stack pointer

   	 jr $ra
partition:

  	addi $sp,$sp, -20
        sw $ra, 16($sp)
        sw $s3,12($sp)         # save $s3 on stack
        sw $s2, 8($sp)         # save $s2 on stack
        sw $s1, 4($sp)         # save $s1 on stack
        sw $s0, 0($sp)         # save $s0 on stack

###################################################
        
# $s0 = pivot, $s1 = address of v[i], $s2 = address of v[j], $s3 = address of v[end]
	add $t0, $a1, $a2
	srl $t1, $t0, 1
	sll $t1, $t1, 2
	add $s0, $a0, $t1
	lw $s0, 0($s0)
      
        sll $t2, $a1, 2
        add $s2, $a0, $t2      # $s2 = v[i] = v[start]
        
        sll $t1, $a2, 2        # $t1 = end * 4
        add $s3, $a0, $t1      # $s6 = v + (end * 4)
        		           # (j = address of v[end]
        
        #add $t0, $s2, $s3
        #srl $s0, $t0, 1
        #addi $t1, $zero, 2
        #div $t0	, $t1    
        #mflo $s0   # address   
	#lw $s0, 0($s0)
        
        
        
     	#sll $t2, $t1, 2
        #add $s0, $a0, $t2
        		           		           
        	           		           		           		           
        #lw $t0, 0($s2)	       # $t0 = start
        #lw $t1, 0($s3)         # $t1 = end
        #add $t2, $t0, $t1      # t2 = start + end
        #srl $s0, $t2, 1        # pivot = (start + end)/2
        
        sll $t1, $a1, 2
        add $s1, $a0, $t1      # $s1 = address of v[i]
        
        subi $s1, $s1, 4       # v[i] = start - 4
        addi $s3, $s3, 4       # v[j] = end + 4
        
while_loop:

first_while:
	addi $s1, $s1, 4       # i++ (changed to +=4)
	lw $t1, 0($s1)
	slt $t0, $t1, $s0    # stay in first_while if A[i] < pivot 
	beq $t0, 1, first_while
	
second_while:
        subi $s3, $s3, 4
        
	lw $t3, 0($s3)
	slt $t0, $s0, $t3    # t0 = 1 if pivot < v[j] 
	beq $t0, 1, second_while
	
	slt $t0, $s1, $s3      # t0 = 1 if i < j
	beq $t0, $zero, exit
		          
        sw $t3, 0($s1)	       # swap v[i] = v[j]
        sw $t1, 0($s3)
        
        j while_loop
exit:
      
        sub $s3, $s3, $a0
        srl $s3, $s3, 2
        
	move $v0, $s3          # return j
	
###################################################        
        lw $s0, 0($sp)         # restore $s0 from stack
        lw $s1, 4($sp)         # restore $s1 from stack
        lw $s2, 8($sp)         # restore $s2 from stack
        lw $s3,12($sp)         # restore $s3 from stack
        lw $ra,16($sp)         # restore $ra from stack
        addi $sp,$sp, 20       # restore stack pointer

        jr $ra

